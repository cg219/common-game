// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: words.sql

package database

import (
	"context"
)

const getWordByValue = `-- name: GetWordByValue :one
SELECT id, word
FROM words
WHERE value = ?
LIMIT 1
`

type GetWordByValueRow struct {
	ID   int64
	Word string
}

func (q *Queries) GetWordByValue(ctx context.Context, value string) (GetWordByValueRow, error) {
	row := q.db.QueryRowContext(ctx, getWordByValue, value)
	var i GetWordByValueRow
	err := row.Scan(&i.ID, &i.Word)
	return i, err
}

const getWords = `-- name: GetWords :many
SELECT id, word
FROM words
`

type GetWordsRow struct {
	ID   int64
	Word string
}

func (q *Queries) GetWords(ctx context.Context) ([]GetWordsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWordsRow
	for rows.Next() {
		var i GetWordsRow
		if err := rows.Scan(&i.ID, &i.Word); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveWord = `-- name: SaveWord :exec
INSERT INTO words (value, word)
VALUES(?, ?)
RETURNING id
`

type SaveWordParams struct {
	Value string
	Word  string
}

func (q *Queries) SaveWord(ctx context.Context, arg SaveWordParams) error {
	_, err := q.db.ExecContext(ctx, saveWord, arg.Value, arg.Word)
	return err
}
