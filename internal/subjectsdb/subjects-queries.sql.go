// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subjects-queries.sql

package subjectsdb

import (
	"context"
)

const getSubjects = `-- name: GetSubjects :many
SELECT (subject, words)
FROM subjects
`

func (q *Queries) GetSubjects(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectsForGame = `-- name: GetSubjectsForGame :many
WITH randomrows AS (
    SELECT id, subject, words
    FROM subjects
    ORDER BY random()
    LIMIT 4
),
single_words AS (
    SELECT randomrows.id, json_array(json_each.value) AS stringv
    FROM randomrows, json_each(randomrows.words)
)
SELECT id, subject, words
FROM randomrows
WHERE NOT EXISTS (
    SELECT 1
    FROM single_words l1
    JOIN single_words l2 ON l1.stringv = l2.stringv AND l1.id != l2.id
    WHERE l1.id = randomrows.id
)
`

type GetSubjectsForGameRow struct {
	ID      int64
	Subject string
	Words   string
}

func (q *Queries) GetSubjectsForGame(ctx context.Context) ([]GetSubjectsForGameRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubjectsForGame)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubjectsForGameRow
	for rows.Next() {
		var i GetSubjectsForGameRow
		if err := rows.Scan(&i.ID, &i.Subject, &i.Words); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveSubject = `-- name: SaveSubject :exec
INSERT INTO subjects(subject, words)
VALUES (?, ?)
`

type SaveSubjectParams struct {
	Subject string
	Words   string
}

func (q *Queries) SaveSubject(ctx context.Context, arg SaveSubjectParams) error {
	_, err := q.db.ExecContext(ctx, saveSubject, arg.Subject, arg.Words)
	return err
}
